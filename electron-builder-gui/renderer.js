let currentProjectPath = null;
let currentPkg = {};

const TEMPLATES = {
    basic: {
        name: 'my-electron-app',
        productName: 'My Electron App',
        version: '1.0.0',
        description: 'My awesome Electron application',
        main: 'main.js',
        build: {
            appId: 'com.example.myapp',
            productName: 'My Electron App',
            directories: { output: 'dist' },
            win: { target: 'nsis' },
            mac: { target: 'dmg' },
            linux: { target: 'AppImage' }
        }
    },
    'python-backend': {
        name: 'my-app-with-python',
        productName: 'My App (Python Backend)',
        version: '1.0.0',
        description: 'Electron app with local Python backend',
        main: 'main.js',
        build: {
            appId: 'com.example.pythonapp',
            productName: 'My App (Python Backend)',
            extraResources: [{ from: 'backend/', to: 'backend/' }],
            directories: { output: 'dist' },
            win: { target: 'nsis' }
        }
    },
    'frontend-only': {
        name: 'my-frontend-app',
        productName: 'My Frontend App',
        version: '1.0.0',
        description: 'Frontend-only Electron app',
        main: 'main.js',
        build: {
            appId: 'com.example.frontend',
            productName: 'My Frontend App',
            directories: { output: 'dist' },
            win: { target: 'portable' },
            mac: { target: 'zip' }
        }
    }
};

// –≠–õ–ï–ú–ï–ù–¢–´ DOM
const mainMenu = document.getElementById('mainMenu');
const mainInterface = document.getElementById('mainInterface');
const backBtn = document.getElementById('backBtn');
const openExistingBtn = document.getElementById('openExistingBtn');
const createNewBtn = document.getElementById('createNewBtn');
const projectPathEl = document.getElementById('projectPath');
const configSection = document.getElementById('configSection');
const jsonEditor = document.getElementById('jsonEditor');
const logSectionContainer = document.getElementById('logSection');
const buildLogEl = document.getElementById('buildLog');
const openDistBtn = document.getElementById('openDist');

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function showModal(title, message, buttons = [{ text: "–û–ö" }]) {
    const overlay = document.getElementById('modalOverlay');
    const modalTitle = document.getElementById('modalTitle');
    const modalMessage = document.getElementById('modalMessage');
    const modalButtons = document.getElementById('modalButtons');

    modalTitle.textContent = title;
    modalMessage.textContent = message;
    modalButtons.innerHTML = '';

    buttons.forEach(btn => {
        const b = document.createElement('button');
        b.textContent = btn.text;
        b.onclick = () => {
            overlay.classList.remove('active');
            if (btn.onClick) btn.onClick();
        };
        modalButtons.appendChild(b);
    });

    overlay.classList.add('active');
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
function showMainMenu() {
    mainMenu.classList.add('active');
    mainInterface.classList.remove('active');
    currentProjectPath = null;
    currentPkg = {};
    projectPathEl.classList.add('hidden');
    logSectionContainer.classList.add('hidden');
    configSection.classList.add('hidden');
    jsonEditor.classList.add('hidden');
    openDistBtn.classList.add('hidden');
}

function showProjectInterface() {
    mainMenu.classList.remove('active');
    mainInterface.classList.add('active');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
showMainMenu();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
openExistingBtn.addEventListener('click', async () => {
    const folder = await window.api.selectFolder();
    if (folder) {
        currentProjectPath = folder;
        projectPathEl.textContent = `–ü–∞–ø–∫–∞: ${folder}`;
        projectPathEl.classList.remove('hidden');
        await loadPackage();
        showProjectInterface();
    }
});

function showPrompt(title, defaultValue = '') {
    return new Promise((resolve) => {
        const overlay = document.getElementById('modalOverlay');
        const modal = document.createElement('div');
        modal.className = 'modal';

        modal.innerHTML = `
        <h3>${title}</h3>
        <input type="text" id="promptInput" value="${defaultValue}" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ">
        <div style="margin-top: 15px;">
          <button id="promptOk">OK</button>
          <button id="promptCancel">–û—Ç–º–µ–Ω–∞</button>
        </div>
      `;

        const input = modal.querySelector('#promptInput');
        const okBtn = modal.querySelector('#promptOk');
        const cancelBtn = modal.querySelector('#promptCancel');

        okBtn.onclick = () => {
            overlay.removeChild(modal);
            overlay.classList.remove('active');
            resolve(input.value.trim());
        };

        cancelBtn.onclick = () => {
            overlay.removeChild(modal);
            overlay.classList.remove('active');
            resolve(null);
        };

        input.onkeydown = (e) => {
            if (e.key === 'Enter') okBtn.click();
        };

        overlay.appendChild(modal);
        overlay.classList.add('active');
        input.focus();
    });
}

createNewBtn.addEventListener('click', async () => {
    const folder = await window.api.selectFolder();
    if (!folder) return;

    const projectName = await showPrompt("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:", "my-electron-app");
    if (!projectName) return;

    try {
        showModal("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ", "–°–æ–∑–¥–∞—ë—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞...");
        const projectPath = await window.api.createElectronProject(folder, projectName);
        showModal("‚úÖ –ì–æ—Ç–æ–≤–æ", "–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω! –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...");

        currentProjectPath = projectPath;
        await loadPackage();
        showProjectInterface();
    } catch (err) {
        showModal("‚ùå –û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç: " + err.message);
    }
});

backBtn.addEventListener('click', () => {
    showMainMenu();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ package.json
async function loadPackage() {
    const pkg = await window.api.readPackage(currentProjectPath);
    currentPkg = pkg || {};

    configSection.classList.remove('hidden');
    jsonEditor.classList.remove('hidden');
    logSectionContainer.classList.add('hidden');

    const currentOS = await window.api.getPlatform();
    const winLabel = document.querySelector('label[for="win"]') || document.getElementById('win').parentElement;
    const macLabel = document.querySelector('label[for="mac"]') || document.getElementById('mac').parentElement;
    const linuxLabel = document.querySelector('label[for="linux"]') || document.getElementById('linux').parentElement;

    winLabel.style.display = '';
    macLabel.style.display = '';
    linuxLabel.style.display = '';
    
    if (currentOS === 'win32' || currentOS === 'linux') {
        macLabel.style.display = 'none';
    } else if (currentOS === 'linux') {
        document.getElementById('mac').closest('label').style.display = 'none';
    }

    updateUI();
    updateJsonEditor();
}

function updateUI() {
    document.getElementById('productName').value = currentPkg.build?.productName || currentPkg.productName || '';
    document.getElementById('version').value = currentPkg.version || '1.0.0';
    document.getElementById('iconPath').value = currentPkg.build?.icon || '';
}

function updateJsonEditor() {
    const jsonStr = JSON.stringify(currentPkg, null, 2);
    const highlighted = hljs.highlight(jsonStr, { language: "json" }).value;
    document.getElementById('jsonOutput').innerHTML = highlighted;
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
document.getElementById('applyTemplate').addEventListener('click', () => {
    const templateKey = document.getElementById('template').value;
    const template = TEMPLATES[templateKey];
    currentPkg = { ...currentPkg, ...template };
    if (template.build) {
        currentPkg.build = { ...currentPkg.build, ...template.build };
    }
    updateUI();
    updateJsonEditor();
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
document.getElementById('saveBtn').addEventListener('click', async () => {
    currentPkg.productName = document.getElementById('productName').value;
    currentPkg.version = document.getElementById('version').value;
    currentPkg.build = currentPkg.build || {};
    currentPkg.build.productName = currentPkg.productName;
    currentPkg.build.icon = document.getElementById('iconPath').value;

    await window.api.savePackage(currentProjectPath, currentPkg);
    showModal("‚úÖ –ì–æ—Ç–æ–≤–æ", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞!");
    updateJsonEditor();
});

// –í—ã–±–æ—Ä –∏–∫–æ–Ω–∫–∏
document.getElementById('selectIcon').addEventListener('click', async () => {
    const result = await window.api.selectFile([
        { name: 'Images', extensions: ['png', 'ico', 'icns'] }
    ]);
    if (result) {
        const relPath = await window.api.makeRelativePath(currentProjectPath, result);
        document.getElementById('iconPath').value = relPath;
        currentPkg.build = currentPkg.build || {};
        currentPkg.build.icon = relPath;
        updateJsonEditor();
    }
});


// –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª—è
document.getElementById('exportProfile').addEventListener('click', () => {
    const dataStr = JSON.stringify({ pkg: currentPkg }, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'electron-profile.json';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    showModal("üì§ –≠–∫—Å–ø–æ—Ä—Ç", "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!");
});

// –ò–º–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª—è
document.getElementById('importProfile').addEventListener('click', () => {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';
    input.onchange = async (e) => {
        const file = e.target.files[0];
        if (!file) return;
        const text = await file.text();
        try {
            const data = JSON.parse(text);
            if (data.pkg) {
                currentPkg = data.pkg;
                updateUI();
                updateJsonEditor();
                showModal("üì• –ò–º–ø–æ—Ä—Ç", "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!");
            } else {
                throw new Error("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç pkg");
            }
        } catch (err) {
            showModal("‚ùå –û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: " + err.message);
        }
    };
    input.click();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ electron-builder
document.getElementById('checkBtn').addEventListener('click', async () => {
    const hasBuilder = await window.api.checkElectronBuilder(currentProjectPath);
    if (!hasBuilder) {
        showModal("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞", "electron-builder –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?", [
            {
                text: "–î–∞",
                onClick: async () => {
                    try {
                        const success = await window.api.installElectronBuilder(currentProjectPath);
                        if (success) {
                            showModal("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", "electron-builder —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
                        } else {
                            showModal("‚ùå –û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å electron-builder.");
                        }
                    } catch (err) {
                        showModal("‚ùå –û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞: " + err.message);
                    }
                }
            },
            { text: "–ù–µ—Ç" }
        ]);
    } else {
        showModal("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞", "–í—Å—ë –≥–æ—Ç–æ–≤–æ –∫ —Å–±–æ—Ä–∫–µ!");
    }
});

// –°–±–æ—Ä–∫–∞
document.getElementById('buildBtn').addEventListener('click', async () => {
    const platforms = [];
    if (document.getElementById('win').checked) platforms.push('win');
    if (document.getElementById('mac').checked) platforms.push('mac');
    if (document.getElementById('linux').checked) platforms.push('linux');

    if (platforms.length === 0) {
        showModal("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É!");
        return;
    }

    // 1. electron-builder —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    const hasBuilder = await window.api.checkElectronBuilder(currentProjectPath);
    if (!hasBuilder) {
        await window.api.installElectronBuilder(currentProjectPath);
    }

    // 2. electron –µ—Å—Ç—å –≤ devDependencies
    const electronAdded = await window.api.ensureElectronInDevDeps(currentProjectPath);
    if (electronAdded) {
        showModal("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞", "–î–æ–±–∞–≤–ª–µ–Ω electron –≤ devDependencies...");
    }

    // 3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    const hasElectron = await window.api.checkElectronInstalled(currentProjectPath);
    if (!hasElectron) {
        showModal("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞", "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞...");
        const success = await window.api.installProjectDependencies(currentProjectPath);
        if (!success) {
            showModal("‚ùå –û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.");
            return;
        }
    }

    // 4. –°–±–æ—Ä–∫–∞
    configSection.classList.add('hidden');
    logSectionContainer.classList.remove('hidden');
    buildLogEl.innerHTML = '';

    window.api.onBuildLog((data) => {
        const div = document.createElement("div");
        div.textContent = data;
        buildLogEl.appendChild(div);
        buildLogEl.scrollTop = buildLogEl.scrollHeight;
    });

    window.api.onBuildComplete((success) => {
        showModal(success ? "‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" : "‚ùå –û—à–∏–±–∫–∞", success ? "–°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ.");
        if (success) openDistBtn.classList.remove('hidden');
    });

    await window.api.buildProject(currentProjectPath, platforms);
});

// –û—Ç–∫—Ä—ã—Ç—å dist
openDistBtn.addEventListener('click', () => {
    window.api.openFolder(currentProjectPath + '/dist');
});

